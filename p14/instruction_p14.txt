Hashing

function
    void Insert(ElementType Key, struct HashTable * H):
        Print an error message when a duplicated key is inserted. (request will be rejected)
        Print a message when a collision occurs.
        Collision resolution methods are given at the top of the lecture note.
        Print an error message when the hash table is full.
        Print a message if the key is inserted.
    Position find(struct HashTable * H, ElementType value):
        Return the Node structure. If not, return NULL.

input file:
    1st line : Your hash table size is given.
    2nd line : You obtain all the data that should be inserted into the hash table.
               Obtain a list of numbers from the second line, and execute an insertion operation for each number in order.
               If a collision happens, print a message to notify.
               Duplicated insertion query will be rejected.
               When hash bucket get dense, program should conduct rehashing. (X)
    3rd line : The numbers are given for checking whether each number is in the hash table or not.
               For each number, print the message about the availability.


skeleton code

typedef struct ListNode{
    ElementType Element;
    Position Next;
} ListNode;

typedef struct HashTable{
    int TableSize;
    List * TheLists;
} HashTable;

int main(int argc, char * argv[]){
    FILE * f;
    f = fopen(argv[1], "r");
    char index[100];
    int indexnumber;
    char * ptr1, * ptr2, * ptr3;
    char * ptrtmp[3];

    fgets(index, 100, f);
    ptr1 = strtok_r(index, " ", &ptrtmp[0]);

    indexnumber = atoi(ptr1);
    HashTable * hs;
    hs = (HashTable *)malloc(sizeof(HashTable));
    hs->TableSize = indexnumber;
    hs->TheLists = (List *)malloc(sizeof(ListNode)*indexnumber);
    int i;
    for(i = 0; i < indexnumber; i++){
        hs->TheLists[i] = (List)malloc(sizeof(ListNode));
    }

    fgets(index, 100, f);
    ptr2 = strtok_r(index, " ", &ptrtmp[1]);
    while(ptr2 != NULL){
        indexnumber = atoi(ptr2);
        Insert(indexnumber, hs);
        ptr2 = strtok_r(NULL, " ", &ptrtmp[1]);
    }
    Position tmp;
    fgets(index, 100, f);
    ptr3 = strtok_r(index, " ", &ptrtmp[2]);
    while(ptr3 != NULL){
        indexnumber = atoi(ptr3);
        tmp = Find(indexnumber, hs);
        if(tmp == NULL)
            printf("%d is not in the table\n", indexnumber);
        else printf("%d is in the table\n", indexnumber);
        ptr3 = strtok_r(NULL, " ", &ptrtmp[2]);
    }

    return 0;
}